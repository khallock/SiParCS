'''
Replication of gaussian_product.m from the DART_LAB using tkinter

Will Downs, May 2018
'''


'''
update structure is screwed up, probably need to change
'''

from tkinter import *
from tkinter import ttk
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import numpy as np
from math import sqrt as sqrt
from scipy.stats import norm

class gaussian_product:

    def __init__(self, window, grid_col, grid_row):
        self.window = window
        #a mainframe
        self.main_frame = ttk.Frame(self.window, padding = "8") #may need to change padding
        self.main_frame.grid(column = grid_col, row = grid_row) #may need to add sticky parameter
        self.main_frame.columnconfigure(0, weight = 1) #weights for whole grid
        self.main_frame.rowconfigure(0, weight = 1) #weights for whole grid

        #prior variables
        self.prior_mean = StringVar()
        self.prior_mean.set("1")
        self.float_prior_mean = float(self.prior_mean.get())
        self.prior_SD = StringVar()
        self.prior_SD.set("1")
        self.float_prior_SD = float(self.prior_SD.get())
        
        #ob variables
        self.ob = StringVar()
        self.ob.set("1")
        self.float_ob = float(self.ob.get())
        self.ob_SD = StringVar()
        self.ob_SD.set("1")
        self.float_ob_SD = float(self.ob_SD.get())
        
        
        #plot initialization
        self.fig, self.ax = plt.subplots()
        self.plot_initial()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.main_frame)
        self.canvas.get_tk_widget().grid(column = 1, row = 1)

        
        '''top right frame 2x2: prior entry and label widgets
        entries should be entries, tied to prior mean and SD variables
        fixed width widgets, with labels ~3x width of entries'''

        self.prior_frame = ttk.Frame(self.main_frame, padding = "2") #may need to change padding
        self.prior_frame.grid(column = 2, row = 1, sticky = E)

        ttk.Label(self.prior_frame, text = "Prior Mean").grid(column = 1, row = 1, sticky = E)
        ttk.Label(self.prior_frame, text = "Prior SD").grid(column = 1, row = 2, sticky = E)

        self.prior_mean_entry = ttk.Entry(self.prior_frame, width = 5, textvariable = self.prior_mean
                                          , validate = "focusout", validatecommand = self.plot_initial) #may need to change padding
        self.prior_mean_entry.grid(column = 2, row = 1, sticky = E)
        self.prior_SD_entry = ttk.Entry(self.prior_frame, width = 5, textvariable = self.prior_SD
                                        , validate = "focusout", validatecommand = self.plot_initial) #may need to change padding
        self.prior_SD_entry.grid(column = 2, row = 2, sticky = E)

        
        '''middle right frame 2x2: obs entry and label widgets
        entries are entries, tied to obs mean and SD variables
        fixed pixel width widgets, with labels ~3x width of entries'''

        self.ob_frame = ttk.Frame(self.main_frame, padding = "2") #may need to change padding
        self.ob_frame.grid(column = 2, row = 2, sticky = E)

        ttk.Label(self.ob_frame, text = "Observation").grid(column = 1, row = 1, sticky = E)
        ttk.Label(self.ob_frame, text = "Obs. Error SD").grid(column = 1, row = 2, sticky = E)

        self.ob_entry = ttk.Entry(self.ob_frame, width = 5, textvariable = self.ob
                                  , validate = "focusout", validatecommand = self.plot_initial) #may need to change padding
        self.ob_entry.grid(column = 2, row = 1, sticky = E)
        self.ob_SD_entry = ttk.Entry(self.ob_frame, width = 5, textvariable = self.ob_SD
                                     , validate = "focusout", validatecommand = self.plot_initial) #may need to change padding
        self.ob_SD_entry.grid(column = 2, row = 2, sticky = E)

        
        '''lower middle right button: plot posterior button makes plot'''

        ttk.Button(self.main_frame, text = "Plot Posterior", command = self.plot_posterior).grid(column = 2, row = 3)

        
        '''bottom right frame 4x2 (except Posterior label): posterior  labels
        posterior label should be left weighted and large font
        label: mean = label: postMean
        label: SD = label: postSD
        label: Weight = label: postWeight'''

        self.post_mean = StringVar()
        self.post_SD = StringVar()
        self.post_weight = StringVar()

        self.post_frame = ttk.Frame(self.main_frame, padding = "2") #may need to change padding
        self.post_frame.grid(column = 2, row = 4, sticky = E)

        ttk.Label(self.post_frame, text = "Posterior").grid(column = 1, row = 1, sticky = W) #Will need to change font size
        ttk.Label(self.post_frame, text = "Mean = ").grid(column = 1, row = 2, sticky = E)
        ttk.Label(self.post_frame, text = "SD = ").grid(column = 1, row = 3, sticky = E)
        ttk.Label(self.post_frame, text = "Weight = ").grid(column = 1, row = 4, sticky = E)

        ttk.Label(self.post_frame, textvariable = self.post_mean).grid(column = 2, row = 2, sticky = E)
        ttk.Label(self.post_frame, textvariable = self.post_SD).grid(column = 2, row = 3, sticky = E)
        ttk.Label(self.post_frame, textvariable = self.post_weight).grid(column = 2, row = 4, sticky = E)

    
    def gaussian(self, mean, SD):
        y = norm(loc = mean, scale = SD)
        x = np.arange(mean - 5*SD, mean + 5*SD, .1)
        return x, y

    def plot_initial(self):

        self.float_prior_mean = float(self.prior_mean.get())
        self.float_prior_SD = float(self.prior_SD.get())
        self.float_ob = float(self.ob.get())
        self.float_ob_SD = float(self.ob_SD.get())
        
        plt.clf()
        
        self.ax.set_title('gaussian_product')

        def prior():
            prior_x, prior_y = self.gaussian(self.float_prior_mean, self.float_prior_SD)
            prior_y = prior_y.pdf(prior_x)
            plt.plot(prior_x, prior_y, label = 'Prior', color = 'Green')
            return prior_x, prior_y

        def obs():
            obs_x, obs_y = self.gaussian(self.float_ob, self.float_ob_SD)
            obs_y = obs_y.pdf(obs_x)
            plt.plot(obs_x, obs_y, label = 'Obs. Likelihood', ls = 'dashed',
                     color = 'Red')
            return obs_x, obs_y

        prior_x, prior_y = prior()
        obs_x, obs_y = obs()

        self.ax.legend(loc = 'upper left')
        self.ax.set_ylim(ymin = 0, ymax = max(max(prior_y), max(obs_y)))
        self.ax.set_xlim(xmin = min(min(prior_x), min(obs_x)),
                    xmax = max(max(prior_x), max(obs_x)))
        self.fig.tight_layout()

        self.canvas = FigureCanvasTkAgg(self.fig, master=self.main_frame)
        self.canvas.get_tk_widget().grid(column = 1, row = 1)

        return prior_x, prior_y, obs_x, obs_y



    def plot_posterior(self):

        prior_x, prior_y, obs_x, obs_y = self.plot_initial()

        float_post_SD = sqrt(pow(pow(self.float_prior_SD, -2) + pow(self.float_ob_SD, -2), -1))
        float_post_mean = pow(float_post_SD, 2)*(pow(self.float_prior_SD, -2)*
                                                      self.float_prior_mean + pow(self.float_ob_SD, -2)*self.float_ob)

        def post():

            post_x, post_y = self.gaussian(float_post_mean, float_post_SD)
            post_y = post_y.pdf(post_x)
            plt.plot(post_x, post_y, label = 'Posterior', color = 'Blue')
            plt.plot(obs_x, np.multiply(prior_y, obs_y), label = 'Weighted Posterior',
                     ls = 'dashed', color = 'Blue')
            return post_x, post_y

        post_x, post_y = post()

        self.ax.legend(loc = 'upper left')
        self.ax.set_ylim(ymin = 0, ymax = max(max(prior_y), max(obs_y), max(post_y)))
        self.ax.set_xlim(xmin = min(min(prior_x), min(obs_x), min(post_x)),
                    xmax = max(max(prior_x), max(obs_x), max(post_x)))
        self.fig.tight_layout()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.main_frame)
        self.canvas.get_tk_widget().grid(column = 1, row = 1)



#TODO: Weights for resizing            

root = Tk()
widg = gaussian_product(root, 0, 0)
root.mainloop()



